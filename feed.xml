<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://shahmeer.co/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://shahmeer.co/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shahmeer.co/" rel="alternate" type="text/html" /><updated>2017-05-05T15:45:34-04:00</updated><id>https://shahmeer.co//</id><title type="html">Shahmeer Navid</title><subtitle>Shahmeer Navid - Software Engineer
</subtitle><entry><title type="html">Avoiding single page application cache staleness</title><link href="https://shahmeer.co/blog/avoiding-single-page-application-cache-staleness.html" rel="alternate" type="text/html" title="Avoiding single page application cache staleness" /><published>2017-05-04T09:43:41-04:00</published><updated>2017-05-04T09:43:41-04:00</updated><id>https://shahmeer.co/blog/avoiding-single-page-application-cache-staleness</id><content type="html" xml:base="https://shahmeer.co/blog/avoiding-single-page-application-cache-staleness.html">&lt;p&gt;tldr: If you care about cache staleness, consider creating a multi page application instead.&lt;/p&gt;

&lt;p&gt;There are a ton of frameworks and libraries out there that address different aspects of single page application (SPA) development. However, &lt;i&gt;when&lt;/i&gt; to update a client’s cache seems to get neglected&lt;sup&gt;&lt;a href=&quot;#citation-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The problem I’m referring to is probably best illustrated with an example. With a SPA, the client typically makes one request to the server for the HTML of a page. Other pages are generated dynamically through JavaScript and the data from an AJAX request. So if Shirley visits the home page of a SPA and then she clicks on a link to view Kevin’s profile, an API request is sent off to the server to retrieve data related to Kevin. This data is then used to generated HTML which will make up Kevin’s profile page.&lt;/p&gt;

&lt;!-- read more --&gt;

&lt;p&gt;Say Shirley goes to someone else’s profile but then returns back to Kevin’s. It would be poor UX if our SPA made another request for Kevin’s data. So, typically, data from requests is cached by the client. If you’re using REST, your might have a map of urls to responses (which might actually be unneceSPAry because the browser might actually do this caching for you). If you’re using Relay and GraphQL you’ll have a normalized cache of response objects&lt;sup&gt;&lt;a href=&quot;#citation-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Caching is great but it introduces the problem of staleness. What if by the time Shirley went back to Kevin’s profile, Kevin changed his display name to ‘Kevin da Great’? Because Kevin’s data is cached it never gets updated until Shirley refreshes the page.&lt;/p&gt;

&lt;p&gt;In some cases, this may not be a problem. But let’s assume staleness is something we want to solve. There are a couple of ways to go about it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Always make an AJAX request each time we visit a profile page. This still gives us poor UX though.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have a time to live (TTL) for the items in our cache. A good value for the TTL would depend on what type of application you have. For most use cases, it would be pretty small since the UX problem we’re trying to avoid usually occurs when the user quickly goes back to a page that they’ve already loaded.&lt;/p&gt;

    &lt;p&gt;This is actually similar to what the browser does if you have a multi page app. Hitting the back button loads the page from cache, which is why it’s usually so quick.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have the server tell us when something has been updated. This might be complicated to implement though. We could subscribe to updates on particular objects through something like postgres triggers&lt;sup&gt;&lt;a href=&quot;#citation-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;. This works fine when we update objects directly but updates often happen indirectly. For example, if Kevin adds a photo his user object doesn’t get updated. It’s easy to see how this can  quickly increase in complexity.&lt;/p&gt;

    &lt;p&gt;On top of that, there’s the issue of scalability. Obviously polling isn’t going to work - we might as well have just made a full request. So whether you end up using websockets or something else, your server will need to maintain a long lived connection with the client. The number of clients we can support becomes limited.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So which solution do we pick? Approach 1 doesn’t really solve our UX problem and approach 3 introduces a ton of complexity and cost. From the 3, approach number 2 looks the most attractive.&lt;/p&gt;

&lt;p&gt;There’s actually one other thing we can do - forget about single page and go back to multi page apps. Just some of the benefits: we get caching for free since it gets handled by the browser; it reduces a lot of UI work needed to create various loading screens - something that may actually give your app a better impression&lt;sup&gt;&lt;a href=&quot;#citation-4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;; in a mobile centric world, it’s actually better to have a thin client and a thick server than the other way around; multi page apps work better for people with JavaScript disabled; etc, etc.&lt;/p&gt;

&lt;p&gt;To be clear, when I say multi page apps, I’m referring to applications whose main routing logic is handled by the server but this doesn’t mean that everything needs to be a separate page. If Shirley wants to look at Kevin’s pictures, it doesn’t make since to load up a separate page for each picture. So this part of the app should be handled with AJAX. Basically, use good judgment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] Based on me not being able to find good information on the topic.&lt;br /&gt;
[2] &lt;a name=&quot;citation-2&quot; target=&quot;_blank&quot; href=&quot;https://facebook.github.io/relay/docs/thinking-in-graphql.html#client-caching&quot;&gt;https://facebook.github.io/relay/docs/thinking-in-graphql.html#client-caching&lt;/a&gt;&lt;br /&gt;
[3] &lt;a name=&quot;citation-3&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Comet_(programming) &quot;&gt;https://en.wikipedia.org/wiki/Comet_(programming)&lt;/a&gt;&lt;br /&gt;
[4] I’ve noticed that a loading screen gives the impression that the app is slow but waiting for a page to load in a multi page app gives the impression that the internet connection is slow&lt;a name=&quot;citation-4&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><summary type="html">tldr: If you care about cache staleness, consider creating a multi page application instead.

There are a ton of frameworks and libraries out there that address different aspects of single page application (SPA) development. However, when to update a client’s cache seems to get neglected[1].

The problem I’m referring to is probably best illustrated with an example. With a SPA, the client typically makes one request to the server for the HTML of a page. Other pages are generated dynamically through JavaScript and the data from an AJAX request. So if Shirley visits the home page of a SPA and then she clicks on a link to view Kevin’s profile, an API request is sent off to the server to retrieve data related to Kevin. This data is then used to generated HTML which will make up Kevin’s profile page.</summary></entry><entry><title type="html">Avoiding overfetching of data using ‘filtered’ queries</title><link href="https://shahmeer.co/blog/avoid-overfetching-with-filtered-queries.html" rel="alternate" type="text/html" title="Avoiding overfetching of data using 'filtered' queries" /><published>2017-03-06T08:43:41-05:00</published><updated>2017-03-06T08:43:41-05:00</updated><id>https://shahmeer.co/blog/avoid-overfetching-with-filtered-queries</id><content type="html" xml:base="https://shahmeer.co/blog/avoid-overfetching-with-filtered-queries.html">&lt;p&gt;Updated on May 1st, 2017.&lt;/p&gt;

&lt;p&gt;GraphQL does a good job of making it easy to fetch only the data you need when making a specific request. A lot has been written about GraphQL and its benefits so I won’t get too much into it. Basically, GraphQL queries make it dead simple to specify the data you want from an object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-graphql&quot; data-lang=&quot;graphql&quot;&gt;# An example GraphQL query fetching just the brand, capacity, and price for all water bottles that are blue.
{
  waterbottles(color: &quot;blue&quot;) {
    id
    capacity
    brand
    price
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that you could definitely achieve the same thing with a typical REST endpoint and query parameters.&lt;/p&gt;

&lt;p&gt;So GraphQL makes it easy to fetch only the data you want. Often times though, the data you want to fetch isn’t always the smallest amount of data you need to fetch. Take the screen shot from Amazon for example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/avoid_overfetching_filtered_queries/waterbottle-amazon.png&quot; alt=&quot;Amazon water bottle search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we have a page with a series of water bottles along with their brands, capacity, and prices (simplified and among other things). When you click on one of the bottles, a product page is opened, showing more information about the bottle. Assuming we have a single page app, what usually ends up happening is that another request for the selected water bottle is made:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-graphql&quot; data-lang=&quot;graphql&quot;&gt;{
  waterbottle(id: 101) {
    capacity
    brand
    price
    description
    ...WaterBottleReviews
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We already had the capacity, brand, and price of this water bottle so it’s inefficient to query for it again. In this example, the amount of duplicated data is pretty small. But it’s not hard to imagine a scenario where we make a request for all the reviews of a water bottle despite already having this data in memory. This has the potential to use up a lot of unnecessary bandwidth.&lt;/p&gt;

&lt;p&gt;We can use a dynamic ‘filtered’ query to help reduce what we ask for.&lt;/p&gt;

&lt;!-- read more --&gt;

&lt;p&gt;We can figure out which fields we don’t need by using our application state. If our water bottles are stored in memory, we can just compare against our queries.&lt;/p&gt;

&lt;p&gt;Our state could look something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  waterbottles: {
    ...

    101: {
      id: 101,
      capacity: 750,
      brand: 'Camelback',
      price: 25,
      description: null,
      reviews: null,
    },

    ...
  },
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So we know we already have capacity, brand, and price. Our query for the water bottle’s product page then only needs to be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-graphql&quot; data-lang=&quot;graphql&quot;&gt;{
  waterbottle(id: 101) {
    description
    ...WaterBottleReviews
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It turns out that Relay Classic already does this.&lt;sup&gt;&lt;a href=&quot;#citation-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Relay Modern also has support for this via the &lt;code class=&quot;highlighter-rouge&quot;&gt;RefetchContainer&lt;/code&gt;&lt;sup&gt;&lt;a href=&quot;#citation-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;. If you’re using GraphQL but not using Relay though, there’s a little more work involved. The approach that would work with most GraphQL clients would be to implement a query builder. The output of the query builder can then be passed into any client. For illustrative purposes, a very simplistic one in JavaScript might look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Example Input:
 * {
 *    brand: 1,
 *    color: 1,
 *    reviews: {
 *      username: 1,
 *      text: 1
 *    },
 *    price: 0
 * }
 *
 * Example Output:
 * {
 *    brand
 *    color
 *    reviews: {
 *      username
 *      text
 *    }
 * }
 *
 * @param jsonQuery: Object - JSON used to build the GraphQL query.
 * @returns String - The graphQL query string.
 **/&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;QueryBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;QueryBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above code will take a JSON object and include any keys with truthy values in the GraphQL query generated. Of course, this doesn’t work completely as there are multiple GraphQL features, like variables and aliases, that aren’t accounted for. To come up with a full fledged query builder, we would need a way to encode these features in JSON.&lt;/p&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonQuery&lt;/code&gt; is a JavaScript object, we can easily diff it against any other JavaScript object, allowing us to perform our optimization. Again, there are some lingering questions, like “how would the diffing look like when the GraphQL query is fetching two different objects?”. These should be solvable with a little bit of design work.&lt;/p&gt;

&lt;p&gt;I also haven’t discussed GraphQL on other platforms, like Android and iOS. Typically, GraphQL queries are statically written (I’ll touch in this in a bit) and used to generate classes, allowing GraphQL to integrate well with each platform’s type system. This of course makes what we talked about above difficult. Unfortunately, I don’t have enough experience with GraphQL on mobile platforms so can’t really offer any useful thoughts here.&lt;/p&gt;

&lt;p&gt;Going back to REST though, we can achieve what we talked about pretty easily. We can set up our rest endpoint to return fields that are specified through query parameters: &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/waterbottles/101?brand=1&amp;amp;price=1&lt;/code&gt; would return the brand and the price for water bottle with id &lt;code class=&quot;highlighter-rouge&quot;&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Given existing data for a water bottle, the endpoint string is easy to construct. In fact, most request JavaScript libraries allow query parameters to be specified using an object. A similar situation exists in Java and Objective-C/Swift land.&lt;/p&gt;

&lt;p&gt;Some notes. If you’re using GraphQL (Relay or not), strongly consider static queries&lt;sup&gt;&lt;a href=&quot;#citation-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;. Even if you don’t use Relay, you can still precompile these and have your request payload just be an identifier rather than sending up the entire GraphQL query. You can also optimize the amount of data you fetch by having different static queries and doing something similar to Relay’s &lt;code class=&quot;highlighter-rouge&quot;&gt;RefetchContainer&lt;/code&gt;. Regardless though, in almost all cases sending along some more data with a request isn’t going to be the main bottleneck. Something like actually initiating the request will be. So if you’re going to make a a request for data, sending along some more probably won’t hurt performance too much. This can obviously differ on a case by case basis so, as with everything, understand your situation before taking action.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] &lt;a name=&quot;citation-1&quot; href=&quot;https://github.com/facebook/relay/blob/master/packages/react-relay/classic/traversal/diffRelayQuery.js#L77&quot; target=&quot;_blank&quot;&gt;https://github.com/facebook/relay/blob/master/packages/react-relay/classic/traversal/diffRelayQuery.js#L77&lt;/a&gt;&lt;br /&gt;
[2] &lt;a name=&quot;citation-2&quot; href=&quot;https://facebook.github.io/relay/docs/refetch-container.html&quot; target=&quot;_blank&quot;&gt;https://facebook.github.io/relay/docs/refetch-container.html&lt;/a&gt;&lt;br /&gt;
[3] &lt;a name=&quot;citation-3&quot; href=&quot;https://dev-blog.apollodata.com/5-benefits-of-static-graphql-queries-b7fa90b0b69a&quot; target=&quot;_blank&quot;&gt;https://dev-blog.apollodata.com/5-benefits-of-static-graphql-queries-b7fa90b0b69a&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><summary type="html">Updated on May 1st, 2017.

GraphQL does a good job of making it easy to fetch only the data you need when making a specific request. A lot has been written about GraphQL and its benefits so I won’t get too much into it. Basically, GraphQL queries make it dead simple to specify the data you want from an object.

# An example GraphQL query fetching just the brand, capacity, and price for all water bottles that are blue.
{
  waterbottles(color: &quot;blue&quot;) {
    id
    capacity
    brand
    price
  }
}

Note that you could definitely achieve the same thing with a typical REST endpoint and query parameters.

So GraphQL makes it easy to fetch only the data you want. Often times though, the data you want to fetch isn’t always the smallest amount of data you need to fetch. Take the screen shot from Amazon for example:



Here, we have a page with a series of water bottles along with their brands, capacity, and prices (simplified and among other things). When you click on one of the bottles, a product page is opened, showing more information about the bottle. Assuming we have a single page app, what usually ends up happening is that another request for the selected water bottle is made:

{
  waterbottle(id: 101) {
    capacity
    brand
    price
    description
    ...WaterBottleReviews
  }
}

We already had the capacity, brand, and price of this water bottle so it’s inefficient to query for it again. In this example, the amount of duplicated data is pretty small. But it’s not hard to imagine a scenario where we make a request for all the reviews of a water bottle despite already having this data in memory. This has the potential to use up a lot of unnecessary bandwidth.

We can use a dynamic ‘filtered’ query to help reduce what we ask for.</summary></entry><entry><title type="html">Triangle strips and hamiltonian paths</title><link href="https://shahmeer.co/blog/graph-theory-and-computer-graphics.html" rel="alternate" type="text/html" title="Triangle strips and hamiltonian paths" /><published>2017-02-02T08:43:41-05:00</published><updated>2017-02-02T08:43:41-05:00</updated><id>https://shahmeer.co/blog/graph-theory-and-computer-graphics</id><content type="html" xml:base="https://shahmeer.co/blog/graph-theory-and-computer-graphics.html">&lt;p&gt;Graph theory is one of my favorite topics within math. The subject not only offers some pretty fun problems to solve but it also has some important applications in many other fields, not just computer science.&lt;/p&gt;

&lt;p&gt;Most of graph theory’s computer science applications seem to be related to finding shortest paths though - whether it’s for finding the shortest route to a location on a map or it’s for finding the shortest path from one node to another in a network. There are a whole bunch of other cool graph theory applications so I decided to write about one that seemed pretty interesting to me: using graph theory to help determine if a triangle mesh can be represented using a triangle strip.&lt;/p&gt;

&lt;!-- read more --&gt;

&lt;p&gt;Fair warning though - what I’m about to talk about is actually pretty useless. This is partly because of being outdated but I’ll expand on why in a bit.&lt;/p&gt;

&lt;p&gt;If you’re not familiar, graphics hardware is really good at rendering triangles. So most graphics models are represented as just that, a whole bunch of triangles. Triangles themselves are represented as 3 vertices. So in 3D space each triangle is represented using 9 numbers (xyz coordinates for each of the 3 vertices). A mesh is just a bunch of triangles that form some model, like a cube for example. Typical meshes can be made up of hundreds, if not thousands, of triangles.&lt;/p&gt;

&lt;p&gt;The data for these meshes usually first exists on the CPU and needs to be transferred to the GPU. Of course, the faster this transfer, the faster our graphics application is. So it makes sense to try to minimize the amount of data we transfer.&lt;/p&gt;

&lt;p&gt;The naive way to represent triangles meshes is to simply include each vertex of each triangle. We can do better than that though.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/graph_theory_and_comp_sci/triangle_strip.svg&quot; alt=&quot;Example of a triangle strip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you look at the mesh above, you’ll notice that the triangles share vertices. The above is actually a triangle strip and can be represented using something like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj&quot; data-lang=&quot;obj&quot;&gt;v1_x v1_y v1_z
v2_x v2_y v2_z
v3_x v3_y v3_z
v4_x v4_y v4_z
v5_x v5_y v5_z
v6_x v6_y v6_z
v7_x v7_y v7_z
v8_x v8_y v8_z&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only the first triangle in the strip needs to have all its vertices declared. Each subsequent triangle can be defined with just one additional vertex. Formally, a triangle strip is a series of triangles where each pair of consecutive triangles share an edge.&lt;/p&gt;

&lt;p&gt;This is pretty good compared to the naive representation, which uses 18 vertices compared just 8 vertices:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-obj&quot; data-lang=&quot;obj&quot;&gt;# Triangle 1
v1_x v1_y v1_z
v2_x v2_y v2_z
v3_x v3_y v3_z

# Triangle 2
v2_x v2_y v2_z
v4_x v4_y v4_z
v3_x v3_y v3_z

# Triangle 3
v3_x v3_y v3_z
v4_x v4_y v4_z
v5_x v5_y v5_z

# Triangle 4
v4_x v4_y v4_z
v6_x v6_y v6_z
v5_x v5_y v5_z

# Triangle 5
v5_x v5_y v5_z
v6_x v6_y v6_z
v7_x v7_y v7_z

# Triangle 6
v6_x v6_y v6_z
v8_x v8_y v8_z
v7_x v7_y v7_z&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aside: If you’re paying attention, you’ll notice that the order of the vertices is kind of weird. This is because the front face of the triangle needs to be known for things like culling. OpenGL uses the order the vertices are declared in, either clockwise or counter clockwise, to determine where the front face of the triangle is. You can read more about it &lt;a traget=&quot;_blank&quot; href=&quot;https://www.khronos.org/opengl/wiki/Face_Culling&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways, now about why this is kind of useless. For one, not everything can be represented as triangle strips. Consider the poorly drawn polygon below and it’s triangulation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/graph_theory_and_comp_sci/polygon.svg&quot; alt=&quot;Non triangle strip polygon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s impossible to give a series of triangles where each consecutive pair of triangles share an edge.&lt;/p&gt;

&lt;p&gt;So in the old days, people would decompose a model to as many triangle strips as possible and then also include any remaining triangles. However, better methods exists today, which brings me to the second reason why this is kind of useless: indexed meshes.&lt;/p&gt;

&lt;p&gt;With indexed meshes, all vertices are declared once and upfront. These vertices are then referenced when defining the triangles that make up the mesh. When sent to the GPU, the defined vertices are loaded into memory and then used as needed. As far as I know, this is pretty much what everyone in industry does&lt;sup&gt;&lt;a href=&quot;#citation-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Despite this though, I still think it’s worthwhile to learn about old methods. So back to the kind of useless (but interesting!) triangle strips. We know that having a triangle strip can help reduce the data we send to the GPU but that not all triangulated polygons can be represented as triangle strips. So how can we determine if a triangulation of a polygon can be represented as a triangle strip? It turns out we can use the concept of Hamiltonian paths.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/graph_theory_and_comp_sci/graphs.svg&quot; alt=&quot;Examples of graph with and without Hamiltonian paths&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Hamiltonian path is a walk through a graph that visits every vertex exactly once. Above, the graph on the left has a Hamiltonian path (highlighted) while the one on the right does not.&lt;/p&gt;

&lt;p&gt;Say we have a polygon and it’s triangulation. We can construct a dual graph where each triangle is a vertex and each vertex is connected if and only if their respective triangles share an edge. Below is an example using a modified version of the triangle strip from before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/graph_theory_and_comp_sci/dual.svg&quot; alt=&quot;Example of a triangle strip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the dual graph contains a Hamiltonian path, we can say that the corresponding sequence of triangles form a triangle strip. We could formally write up a proof for this but it should be pretty easy to see.&lt;/p&gt;

&lt;p&gt;There are many conditions we can use to help determine if a graph has a Hamiltonian path. For example, if a graph has more than two vertices with degree 1, it can’t have a Hamiltonian path. Another example is Dirac’s theorem&lt;sup&gt;&lt;a href=&quot;#citation-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;: a graph with &lt;code class=&quot;highlighter-rouge&quot;&gt;n &amp;gt; 2&lt;/code&gt; vertices has a Hamiltonian cycle if every vertex has degree greater than &lt;code class=&quot;highlighter-rouge&quot;&gt;n/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A couple of notes on Dirac’s theorem:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. If a graph has a Hamiltonian cycle, we know it must have a Hamiltonian path (just remove one edge in the cycle).
2. Dirac's theorem only applies to simple graphs. So no loops or duplicate edges.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a ton of other conditions&lt;sup&gt;&lt;a href=&quot;#citation-3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; but each one is either sufficient or necessary, not both at the same time. This basically means we don’t have a quick way of determining if a graph has a Hamiltonian path; the problem actually turns out to be NP complete&lt;sup&gt;&lt;a href=&quot;#citation-4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Kind of a bummer right? Regardless, it’s pretty cool to me that something like Hamiltonian paths can be somewhat relevant in computer graphics, a seemingly unrelated field.&lt;/p&gt;

&lt;p&gt;There are a couple of things I didn’t touch on here. For example, I talked about triangulations assuming we already had one. What if we’re given an arbitrary polygon and have to compute the triangulation? How many triangulations exist for a polygon and so all their corresponding dual graphs contain Hamiltonian paths? If you’re interested, these questions and more are discussed in &lt;a traget=&quot;_blank&quot; href=&quot;https://www.palfrader.org/research/misc/2011-tristrips.pdf&quot;&gt;this paper&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[1] &lt;a name=&quot;citation-1&quot; traget=&quot;_blank&quot; href=&quot;http://hacksoflife.blogspot.sg/2010/01/to-strip-or-not-to-strip.html&quot;&gt;http://hacksoflife.blogspot.sg/2010/01/to-strip-or-not-to-strip.html&lt;/a&gt;&lt;br /&gt;
[2] &lt;a name=&quot;citation-2&quot; traget=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Hamiltonian_path#Bondy.E2.80.93Chv.C3.A1tal_theorem&quot;&gt;https://en.wikipedia.org/wiki/Hamiltonian_path&lt;/a&gt;&lt;br /&gt;
[3] &lt;a name=&quot;citation-3&quot; traget=&quot;_blank&quot; href=&quot;http://www.rose-hulman.edu/mathjournal/archives/2000/vol1-n1/paper4/v1n1-4pd.PDF&quot;&gt;http://www.rose-hulman.edu&lt;/a&gt;&lt;br /&gt;
[4] &lt;a name=&quot;citation-4&quot; traget=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Hamiltonian_path_problem&quot;&gt;https://en.wikipedia.org/wiki/Hamiltonian_path_problem&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><summary type="html">Graph theory is one of my favorite topics within math. The subject not only offers some pretty fun problems to solve but it also has some important applications in many other fields, not just computer science.

Most of graph theory’s computer science applications seem to be related to finding shortest paths though - whether it’s for finding the shortest route to a location on a map or it’s for finding the shortest path from one node to another in a network. There are a whole bunch of other cool graph theory applications so I decided to write about one that seemed pretty interesting to me: using graph theory to help determine if a triangle mesh can be represented using a triangle strip.</summary></entry><entry><title type="html">The purpose of redux-thunk</title><link href="https://shahmeer.co/blog/the-purpose-of-redux-thunk.html" rel="alternate" type="text/html" title="The purpose of redux-thunk" /><published>2017-01-16T08:43:41-05:00</published><updated>2017-01-16T08:43:41-05:00</updated><id>https://shahmeer.co/blog/the-purpose-of-redux-thunk</id><content type="html" xml:base="https://shahmeer.co/blog/the-purpose-of-redux-thunk.html">&lt;p&gt;The benefit/purpose of the redux-thunk middleware was pretty hard to understand when I was first going through the redux docs, so I thought that writing some things down about it would be a good idea.&lt;/p&gt;

&lt;p&gt;The goal of this post is to help better explain why redux-thunk exists, not how to use it. There is a ton of material out there that covers implementation details (I’ll link to a few below). Also, this post will probably make most sense if you have background knowledge on react and redux.&lt;/p&gt;

&lt;!-- read more --&gt;

&lt;p&gt;Anyways, let’s get into it.&lt;/p&gt;

&lt;p&gt;As a general overview, redux-thunk is middleware designed to help make using asynchronous actions easier. Below is an example of an asynchronous action:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;START_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;END_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is used to mimic the delay that might occur during an async process (like a network call).&lt;/p&gt;

&lt;p&gt;So every time we wanted to perform the above action, we’d need to copy and paste the above code. Of course, we can avoid repeating ourselves by wrapping the code in a function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emitAsyncAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;START_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;END_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage within a component.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;emitAsyncAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This looks alright but we will probably not have access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; function where &lt;code class=&quot;highlighter-rouge&quot;&gt;emitAsyncAction&lt;/code&gt; is defined. We could somehow get around this if we have a singleton store but that introduces more complications if we also want to get server side rendering to work&lt;sup&gt;&lt;a href=&quot;#citation-1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;So the easiest approach is to just have dispatch be passed into &lt;code class=&quot;highlighter-rouge&quot;&gt;emitAsyncAction&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emitAsyncAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;START_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;END_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage within a component.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;emitAsyncAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This works and is pretty reasonable. However, some people might prefer not having to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;emitAsyncAction&lt;/code&gt;. This is where redux-thunk comes in. The middleware allows &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; to accept functions instead of just action objects.&lt;/p&gt;

&lt;p&gt;After refactoring our code a little bit, we have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncActionCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;START_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;END_NETWORK_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage within a component.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asyncActionCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of having a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;emitAsyncAction&lt;/code&gt;, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncActionCreator&lt;/code&gt;. Usually an “action” is just an object but we can think of the function returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncActionCreator&lt;/code&gt; to be an action as well&lt;sup&gt;&lt;a href=&quot;#citation-2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;. So when we dispatch our async action, redux/redux-thunk will execute the function in a context where &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; is available.&lt;/p&gt;

&lt;p&gt;And that’s it. redux-thunk is basically a form of syntactic sugar to prevent having to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt; around. To me, the biggest aesthetic benefit is that dispatching asynchronous and synchronous actions look the same with redux-thunk:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asyncActionCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syncActionCreator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_PAYLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage within a component.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asyncActionCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;syncActionCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are some other posts out there that help explain why redux-thunk exists, most notably this &lt;a href=&quot;http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559&quot; target=&quot;_blank&quot;&gt;stackoverflow answer&lt;/a&gt;. The answer gives a few other reasons why redux-thunk exists but, to be honest, I found most of them poorly explained and/or unconvincing. Regardless, you should check it out and judge for yourself.&lt;/p&gt;

&lt;p&gt;If you want to learn how to use redux-thunk, check out some of these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://redux.js.org/docs/advanced/AsyncActions.html&quot; target=&quot;_blank&quot;&gt;http://redux.js.org/docs/advanced/AsyncActions.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot; target=&quot;_blank&quot;&gt;https://github.com/gaearon/redux-thunk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3#.ffc3zyw1c&quot; target=&quot;_blank&quot;&gt;https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3#.ffc3zyw1c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;[1] &lt;a name=&quot;citation-1&quot; traget=&quot;_blank&quot; href=&quot;http://redux.js.org/docs/recipes/ServerRendering.html&quot;&gt;http://redux.js.org/docs/recipes/ServerRendering.html&lt;/a&gt;&lt;br /&gt;
[2] I mean, technically, a JS function is an object but you know what I mean.&lt;a name=&quot;citation-2&quot;&gt;&lt;/a&gt;&lt;/p&gt;</content><summary type="html">The benefit/purpose of the redux-thunk middleware was pretty hard to understand when I was first going through the redux docs, so I thought that writing some things down about it would be a good idea.

The goal of this post is to help better explain why redux-thunk exists, not how to use it. There is a ton of material out there that covers implementation details (I’ll link to a few below). Also, this post will probably make most sense if you have background knowledge on react and redux.</summary></entry></feed>
